type pair = {
  key: string;
  value: string;
}

type config_channel_format = [
  | C_plaintext <json name="plaintext">
  | C_json <json name="json">
] <ocaml repr="classic">

(* LOGGING *)
type config_log_level = [
  | Debug <json name="debug">
  | Info <json name="info">
  | Notice <json name="notice">
  | Warning <json name="warning">
  | Error <json name="error">
  | Fatal <json name="fatal">
]


(* NETWORK *)
type config_http_settings = {
  ~backlog <ocaml default="100">: int;
}

type zmq_socket_settings = {
  ?zmq_maxmsgsize <json name="ZMQ_MAXMSGSIZE">: int option;
  ?zmq_linger <json name="ZMQ_LINGER">: int option;
  ?zmq_reconnect_ivl <json name="ZMQ_RECONNECT_IVL">: int option;
  ?zmq_reconnect_ivl_max <json name="ZMQ_RECONNECT_IVL_MAX">: int option;
  ?zmq_backlog <json name="ZMQ_BACKLOG">: int option;
  ?zmq_sndhwm <json name="ZMQ_SNDHWM">: int option;
  ?zmq_rcvhwm <json name="ZMQ_RCVHWM">: int option;
}

type config_zmq_settings = {
  ~concurrency <ocaml default="20">: int;
  ?socket_settings <json name="socketSettings">: zmq_socket_settings option;
}

type config_proto = [
  | Config_http_prot <json name="http"> of config_http_settings
  | Config_zmq_prot <json name="zmq"> of config_zmq_settings
] <ocaml repr="classic">

type config_listener = {
  name: string;
  host: string;
  port: int;
  protocol_settings <json name="protocolSettings" tag_field="protocol">: config_proto;
}


(* BACKENDS *)
type config_redis = {
  host <json name="host">: string;
  port <json name="port">: int;
  ?auth <json name="auth">: string nullable;
} <ocaml field_prefix="redis_">

type config_httpproxy = {
  base_urls <json name="baseUrls">: string list <ocaml repr="array">;
  base_headers <json name="baseHeaders">: pair list;
  timeout: int <ocaml repr="float">;
  ~append_chan_name <json name="appendChannelName"><ocaml default="false">: bool;
  ~input_format <json name="remoteInputFormat"><ocaml default="C_json">: config_channel_format;
  ~output_format <json name="remoteOutputFormat"><ocaml default="C_json">: config_channel_format;
}

type config_pubsub = {
  host: string;
  port: int;
  ?socket_settings <json name="socketSettings">: zmq_socket_settings option;
} <ocaml field_prefix="p_">

type config_fifo = {
  host: string;
  port: int;
  ?socket_settings <json name="socketSettings">: zmq_socket_settings option;
  timeout: int <ocaml repr="float">;
  ~health_time_limit <json name="healthTimeLimit"><ocaml default="5000.0">: int <ocaml repr="float">;
} <ocaml field_prefix="f_">

type config_elasticsearch = {
  base_urls <json name="baseUrls">: string list <ocaml repr="array">;
  index: string;
  typename <json name="type">: string;
  timeout: int <ocaml repr="float">;
}

type config_backend = [
  | None <json name="none">
  | Memory <json name="memory">
  | Disk <json name="disk">
  | Http_proxy <json name="httpproxy"> of config_httpproxy
  | Pubsub <json name="pubsub"> of config_pubsub
  | Fifo <json name="fifo"> of config_fifo
  | Elasticsearch <json name="elasticsearch"> of config_elasticsearch
  | Redis <json name="redis"> of config_redis
]


(* CHANNELS *)
type config_channel_acknowledgement = [
  | C_instant <json name="none">
  | C_saved <json name="saved">
] <ocaml repr="classic">

type config_scripting = {
  mappers: string list <ocaml repr="array">;
} <ocaml field_prefix="c_">

type config_batching = {
  max_time <json name="maxTime">: int <ocaml repr="float">;
  max_size <json name="maxSize">: int;
} <ocaml field_prefix="c_">

type config_channel_write = {
  ~http_format <json name="httpFormat"><ocaml default="C_json">: config_channel_format;
  ~ack <json name="acknowledgement"><ocaml default="C_saved">: config_channel_acknowledgement;
  forward: string list;
  ?scripting: config_scripting nullable;
  ?batching: config_batching nullable;
} <ocaml field_prefix="c_">

type config_channel_read = {
  ~http_format <json name="httpFormat"><ocaml default="C_json">: config_channel_format;
  ~stream_slice_size <json name="streamSliceSize"><ocaml default="500">: int;
  ~only_once <json name="onlyOnce"><ocaml default="false">: bool;
} <ocaml field_prefix="c_">

type config_channel = {
  endpoint_names <json name="listeners">: string list;
  backend_settings <json name="backendSettings" tag_field="backend">: config_backend;
  emptiable: bool;
  raw: bool;
  read_settings <json name="readSettings">: config_channel_read nullable;
  write_settings <json name="writeSettings">: config_channel_write nullable;
  ~separator <ocaml default="\"\n\"">: string;
  ~buffer_size <json name="averageSize"><ocaml default="256">: int;
  ~max_read <json name="maxRead"><ocaml default="1000">: int;
  ~avg_read <json name="averageRead"><ocaml default="32">: int;
}


(* GENERAL *)
type config_admin = {
  host: string;
  port: int;
} <ocaml field_prefix="a_">

type config_newque = {
  log_level <json name="logLevel">: config_log_level;
  admin: config_admin;
  endpoints <json name="listeners">: config_listener list;
}
