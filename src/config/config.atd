type pair = {
  key: string;
  value: string;
}

(* LOGGING *)
type config_log_level = [
  | Debug <json name="debug">
  | Info <json name="info">
  | Notice <json name="notice">
  | Warning <json name="warning">
  | Error <json name="error">
  | Fatal <json name="fatal">
] <ocaml repr="classic">


(* NETWORK *)
type config_http_settings = {
  ~backlog <ocaml default="20">: int;
}
type config_zmq_settings = {
  something: string;
}

type config_proto = [
  | Http_proto <json name="http"> of config_http_settings
  | Zmq_proto <json name="zmq"> of config_zmq_settings
] <ocaml repr="classic">

type config_listener = {
  name: string;
  host: string;
  port: int;
  listener_settings <json name="protocolSettings" tag_field="protocol">: config_proto;
}


(* PERSISTENCE *)
type config_redis = {
  host <json name="host">: string;
  port <json name="port">: int;
  ?auth <json name="auth">: string nullable;
} <ocaml field_prefix="redis_">

type config_remote_http = {
  base_urls <json name="baseUrls">: string list <ocaml repr="array">;
  base_headers <json name="baseHeaders">: pair list;
  append_chan_name <json name="appendChannelName">: bool;
  ~input_format <json name="remoteInputFormat"><ocaml default="C_json">: config_channel_format;
  ~output_format <json name="remoteOutputFormat"><ocaml default="C_json">: config_channel_format;
}

type config_persistence = [
  | Memory <json name="memory">
  | Disk <json name="disk">
  | Remote_http <json name="http"> of config_remote_http
  | Redis <json name="redis"> of config_redis
]


(* CHANNELS *)
type config_channel_acknowledgement = [
  | C_instant <json name="none">
  | C_saved <json name="saved">
] <ocaml repr="classic">

type config_channel_write = {
  ~ack <json name="acknowledgement"><ocaml default="C_saved">: config_channel_acknowledgement;
  ~format <ocaml default="C_json">: config_channel_format;
  copy_to <json name="copyToChannels">: string list;
} <ocaml field_prefix="c_">

type config_channel_format = [
  | C_plaintext <json name="plaintext">
  | C_json <json name="json">
] <ocaml repr="classic">

type config_channel_read = {
  ~format <ocaml default="C_json">: config_channel_format;
  only_once <json name="onlyOnce">: bool;
} <ocaml field_prefix="c_">

(* TODO: Validate that the separators are non-empty *)
type config_channel = {
  endpoint_names <json name="listeners">: string list;
  persistence_settings <json name="persistenceSettings" tag_field="persistence">: config_persistence;
  read_settings <json name="readSettings">: config_channel_read nullable;
  write_settings <json name="writeSettings">: config_channel_write nullable;
  ~separator <ocaml default="\"\n\"">: string;
  ~buffer_size <json name="averageSize"> <ocaml default="256">: int;
  ~max_read <json name="maxRead"> <ocaml default="1000">: int;
  ~avg_read <json name="averageRead"> <ocaml default="32">: int;
}


(* GENERAL *)
type config_admin = {
  host: string;
  port: int;
} <ocaml field_prefix="a_">

type config_newque = {
  log_level <json name="logLevel">: config_log_level;
  admin: config_admin;
  endpoints <json name="listeners">: config_listener list;
}
